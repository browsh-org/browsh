name: Test/Release
on: [push]

jobs:
  test_maybe_release:
    name: Test (then release if new version)
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GOBIN: ${{ github.workspace }}/bin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.x
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Firefox
        uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: 102.0.1 # TODO: Use same version in Dockerfile
      - run: firefox --version

      # Web extension tests
      - run: npm ci
        working-directory: ./webext
      - name: Web extension tests
        run: npm test
        working-directory: ./webext
      - run: npm run build_webextension
        working-directory: ./webext

      # Interfacer tests
      - name: Build
        run: go build ./cmd/browsh
        working-directory: ./interfacer

      - name: Unit tests
        run: go test -v $(find src/browsh -name '*.go' | grep -v windows)
        working-directory: ./interfacer
      - name: TTY tests
        run: go test test/tty/*.go -v -ginkgo.slowSpecThreshold=30 -ginkgo.flakeAttempts=3
        working-directory: ./interfacer
      - name: TTY debug log
        if: ${{ failure() }}
        run: cat ./interfacer/test/tty/debug.log || echo "No log file"
      - name: HTTP Server tests
        run: go test test/http-server/*.go -v -ginkgo.slowSpecThreshold=30 -ginkgo.flakeAttempts=3
        working-directory: ./interfacer
      - name: HTTP Server debug log
        if: ${{ failure() }}
        run: cat ./interfacer/test/http-server/debug.log || echo "No log file"

      # Release
      - name: Check for new version
        id: check_versions
        run: ./ctl.sh github_actions_output_version_status
      - name: Release
        if: contains(steps.check_versions.outputs.is_new_version, 'true')
        run: ./ctl.sh release
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: tombh
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Docker Release
        run: ./ctl.sh docker_release
      - name: Update Browsh Website
        run: ./ctl.sh update_browsh_website_with_new_version
